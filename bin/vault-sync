#!/usr/bin/env python

import argparse
import os
import sys

DIRECTORIES = [".aws", ".credentials", ".keys", ".s3cfg", ".ssh"]

FILES = [
    ".kube/config",
    ".kube/mci-com-sensirion",
    ".kube/do",
    ".kube/gcp",
    #
    ".passwd-s3fs",
    ".pbi.cfg",
]


HOME_PATH = "/Users/ohrstrom"
VAULT_PATH = "/Volumes/VAULT/ohrstrom/"


def sync_vault(src_base, dst_base, directories=[], files=[]):

    if not os.path.isdir(src_base):
        raise Exception("invalid source directory: {}".format(src_base))

    if not os.path.isdir(dst_base):
        raise Exception("invalid destination directory: {}".format(dst_base))

    tpl_dir = "rsync -a {src}/ {dst}/"
    tpl_file = "rsync -a {src} {dst}"

    for dir in directories:
        dir = dir.rstrip("/")

        src = os.path.join(src_base, dir)
        dst = os.path.join(dst_base, dir)

        cmd = tpl_dir.format(src=src, dst=dst)
        print("running: {}".format(cmd))
        p = os.system(cmd)
        # print("-" * 72)

    for path in files:

        src = os.path.join(src_base, path)
        dst = os.path.join(dst_base, path)

        try:
            os.makedirs(os.path.dirname(dst))
        except FileExistsError:
            pass

        cmd = tpl_file.format(src=src, dst=dst)
        print("running: {}".format(cmd))
        p = os.system(cmd)
        # print("-" * 72)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="VAULT sync")
    parser.add_argument(
        "-m",
        "--mode",
        dest="mode",
        default="backup",
        required=True,
        choices={"backup", "restore"},
    )

    args = parser.parse_args()

    if args.mode == "restore":
        src_base = VAULT_PATH
        dst_base = HOME_PATH
    else:
        src_base = HOME_PATH
        dst_base = VAULT_PATH

    sync_vault(src_base, dst_base, directories=DIRECTORIES, files=FILES)
